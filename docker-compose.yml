services:
  web:
    build: .
    container_name: coldreach-web
    command: bash -lc "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  redis:
    image: redis:7
    container_name: coldreach-redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  db:
    image: postgres:16-alpine
    container_name: coldreach-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 20

  celery-worker-dispatch:
    build: .
    depends_on: [web, redis]
    command: >
      sh -c "celery -A core.celery_app worker
      -Q dispatch
      -n dispatch@%h
      -c 4
      --prefetch-multiplier=1
      --loglevel=INFO"
    volumes:
      - .:/app

  celery-worker-send:
    build: .
    depends_on: [web, redis]
    command: >
      sh -c "celery -A core.celery_app worker
      -Q send
      -n send@%h
      -c 16
      --prefetch-multiplier=1
      --loglevel=INFO"
    volumes:
      - .:/app

  celery-beat:
    build: .
    depends_on: [web, redis]
    command: >
      sh -c "celery -A core.celery_app beat
      --loglevel=INFO
      --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - .:/app

  flower:
    build: .
    container_name: flower
    command: celery -A core flower --port=5555
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - web
    environment:
      - TZ=Africa/Cairo

volumes:
  redis_data:
  pgdata:
